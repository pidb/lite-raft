syntax = "proto3";
package multiraft;

import "eraftpb.proto";

message GroupMetadata {
    uint64 group_id = 1;
    uint64 node_id = 2;
    uint64 create_timestamp = 3;
  }

message ReplicaDesc {
  uint64 node_id = 1;
  uint64 group_id = 2;
  uint64 replica_id = 3;
  // uint64 store_id = 3;
}

// MultiRaftMessage wraps eraft.Message and includes the node information.
// 1. `group_id` is the raft group identifier. it must define that 0 is invalid.
// 2. `from_node` represents which node the message came from, so `msg.from`
// represents
//    which replica id came from the node.
// 3. `to_node` represents the node to which the message is sent, so `msg.to`
// represents
//    the replica id sent to the node.
// 4. `replica` contains the location information of the raft group replica. It
// can be empty.
//     Note: This field is used to configure new replicas to learn this
//     information when the raft group sends initialization messages to other
//     nodes after a membership change.
// 5. `msg` is eraft.Message.
message MultiRaftMessage {
  uint64 group_id = 1;
  uint64 from_node = 2;
  uint64 to_node = 3;
  repeated ReplicaDesc replicas = 4;
  eraftpb.Message msg = 5;
}

// MultiRaftMessageResponse is an empty message returned by raft RPCs. If a
// response is needed it will be sent as a separate message.
message MultiRaftMessageResponse {}

message SingleMembershipChange {
  uint64 node_id = 1;
  uint64 replica_id = 2;
  eraftpb.ConfChangeType change_type = 3;
}

message MembershipChangeData {
  eraftpb.ConfChangeTransition transition = 3;
  repeated SingleMembershipChange changes = 4;
  repeated ReplicaDesc replicas = 5;
}

service MultiRaftService {
  rpc Send(MultiRaftMessage) returns (MultiRaftMessageResponse) {}
} 

// Creates a new Raft consensus group with the given Â·replica_id as the initial leader. 
// 
// # Notes
// - If the group already exists, this request is equivalent to re-starting it. 
// - If the group is already started, this request is a no-op.
message CreateGroupRequest {
  uint64 group_id = 1;
  uint64 replica_id = 2;
  repeated ReplicaDesc replicas = 3;
  // If it is not `0`, the raft group will skip the logs before `applied_hint` when it starts.
  // 
  // # Panic 
  // If `applied_hint > min(committed, persisted) 
  uint64 applied_hint = 4;
}

message RemoveGroupRequest {
  uint64 group_id = 1;
  uint64 replica_id = 2;
  repeated ReplicaDesc replicas = 3;
}

